#!/bin/bash

set -ueo pipefail

# Turn the old school BUILDKITE_PLUGIN_DOCKER_COMPOSE_BUILDKITE_PLUGIN_GIT_
# environment variables into the desired BUILDKITE_PLUGIN_DOCKER_COMPOSE_
# variables. This can be removed once we update the bootstrap for this new
# plugin naming convention.
export $(env | grep "_BUILDKITE_PLUGIN_GIT_" | sed "s/_BUILDKITE_PLUGIN_GIT_/_/")
export $(env | grep "BUILDKITE_PLUGIN_DOCKER_COMPOSE_BUILDKITE_PLUGIN_" | sed "s/BUILDKITE_PLUGIN_DOCKER_COMPOSE_BUILDKITE_PLUGIN_/BUILDKITE_PLUGIN_DOCKER_COMPOSE_/g")

## SET UP SHARED FUNCTIONS

# Show a prompt for a command
function plugin_prompt {
  # Output "$" prefix in a pleasant grey...
  echo -ne "\033[90m$\033[0m"

  # ...each positional parameter with spaces and correct escaping for copy/pasting...
  printf " %q" "$@"

  # ...and a trailing newline.
  echo
}

# Shows the command being run, and runs it
function plugin_prompt_and_run {
  plugin_prompt "$@"
  "$@"
}

# Shows the command about to be run, and exits if it fails
function plugin_prompt_and_must_run {
  plugin_prompt_and_run "$@" || exit $?
}

# Returns the name of the docker compose project for this build
function docker_compose_project_name() {
  # No dashes or underscores because docker-compose will remove them anyways
  echo "buildkite${BUILDKITE_JOB_ID//-}"
}

# Returns the name of the docker compose container that corresponds to the given service
function docker_compose_container_name() {
  echo "$(docker_compose_project_name)_$1"
}

# Runs the docker-compose command, scoped to the project, with the given arguments
function run_docker_compose() {
  local command=(docker-compose)

  # Append potentially multiple docker compose file
  if [[ -n "${BUILDKITE_PLUGIN_DOCKER_COMPOSE_CONFIG_0:-}" ]]; then
    # Plugin config specified an array of config files
    local i=0
    local parameter="BUILDKITE_PLUGIN_DOCKER_COMPOSE_CONFIG_${i}"
    while [[ -n "${!parameter:-}" ]]; do
      command+=(-f "${!parameter}")
      i=$[$i+1]
      parameter="BUILDKITE_PLUGIN_DOCKER_COMPOSE_CONFIG_${i}"
    done
  elif [[ -n "${BUILDKITE_PLUGIN_DOCKER_COMPOSE_CONFIG:-}" ]]; then
    # Plugin config may be colon-separated files
    declare file
    declare -a files
    IFS=":" read -ra files <<< "$BUILDKITE_PLUGIN_DOCKER_COMPOSE_CONFIG"
    for file in "${files[@]}"; do
      command+=(-f "$file")
    done
  else
    # Use default docker compose location
    command+=(-f "docker-compose.yml")
  fi

  # Append project name
  command+=(-p "$(docker_compose_project_name)")

  plugin_prompt_and_run "${command[@]}" "$@"
}

function build_meta_data_image_tag_key() {
  echo "docker-compose-plugin-built-image-tag-$1"
}

## BUILD OR RUN

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

if [[ ! -z "${BUILDKITE_PLUGIN_DOCKER_COMPOSE_BUILD:-}" ]]; then
  . "$DIR/commands/build.sh"
elif [[ ! -z "${BUILDKITE_PLUGIN_DOCKER_COMPOSE_RUN:-}" ]]; then
  . "$DIR/commands/run.sh"
else
  echo "+++ Docker Compose plugin error"
  echo "No build or run options were specified"
  exit 1
fi
